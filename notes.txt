0:
1:
2: This is your crew. They may look like 5th and 6th graders, but they have been
  hardened through innate determinism and minutes of training.

3:
4: As you are out in deep space, you recieve a threatening transmission from an alien ship.

5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18: This is characterized by asking the question, "I wonder if...?" and then doing it.

- Curiosity about things they don't understand
- Passion for their work
- Optimism, or the belief that they can find answers

19: Thorium is a central server that browsers connect to. Each browser has a
  client ID and can be assigned a crew station, like weapons, navigation, or
  communication.

These crew members come for 5th and 6th grade field trips, and the experience
instills in them a sense of wonder. Many of them end up studying STEM topics as
a result.




20:
21: I wondered if I could learn React and GraphQL while making these spaceship controls,
and even wondered if it were possible. The only way for me to find out was to do it,
so I started small, worked a bit every day, and eventually produced a completed product.

What exactly do these spaceship controls entail?

22: All of my code is available online. Anyone can see it, comment on it, change
  it, etc. It's learning in the open.

23:
24:
25:
26:
27: Thorium is a central server that browsers connect to. Each browser has a
  client ID and can be assigned a crew station, like weapons, navigation, or
  communication.

These crew members come for 5th and 6th grade field trips, and the experience
instills in them a sense of wonder. Many of them end up studying STEM topics as
a result.

28:
29:
30: The flight director also connects with a web browser. They use a special
  control screen called "Core" which gives them at-a-glance access to the state
  of the simulation and the ability to adjust anything as needed.

31:
32:
33:
34: The first problem I have to solve is showing dynamic screens on the crew
  stations. I wondered if I could control what is being shown on the client from
  the server.



35: Create a unique client ID, Subscribe to changes to that client ID, render the
  screen assigned to that station.



36: I wondered if I can dynamically layout core components that I can easily change
and adjust as necessary. Also have the core feed which gives me actionable
components based on things that happen during the flight. Since it's just
components, and they all load data from the unified Apollo GraphQL cache, it's
really easy to do.




37: I wondered if the main viewscreen can be dynamically changed based on the
  state of the simulator.



38: I use an introspection query to figure out what GraphQL mutations are able to
  be used as timeline actions, and then set up special configuration for them if
  necessary



39: Since clients store their client ID in localstorage, it's not possible to have
  multiple clients open at the same time... unless I store a list of clients in
  localstorage



40: I have a little Marco-polo session with the open tab, where a new tabs pings
  other other tabs so it can find out which tab number it is. Then it grabs that
  clientId from the localStorage array. If you know a better way, hit me up on
  Twitter.



41: Server animated contacts at 20fps and LERP on the client. This was just
  playing around with Websockets, animation intervals, and different Linear
  Interpolation methods.



42:
43: As it turns out, CSS is way better at interpolating things than JavaScript



44:
45: I would start with a partner or team. And I would think about making it more friendly to more users.

I wrote a list of 10 things that I would do differently if I did it all over
again. I'm going to revisit them in 3 years and see how many stand the tests of
time.

    1. Use TypeScript
    2. Use the latest features of all the frameworks - hooks, suspense, etc.
    3. Use CSS-in-JS so the CSS isn’t a total nightmare (it’s not too bad, since it’s all scoped to cards, but there are still collisions sometimes that cause problems)
    4. More carefully design the GraphQL schema so it’s consistent.
    5. Make sure subscriptions are more atomic and scoped to just what the subscriber wants (there are currently a LOT of leaky subscriptions)
    6. Do internationalization from the get-go
    7. Do a11y from the get-go
    8. Use a more proper database. My JSON dump works for most peeps, but Ryan Anderson has a MASSIVE snapshot, and his CPU spikes hardcore every time it writes.
    9. Simplify things substantially based on how users actually use Thorium. More sensible defaults, less enterprise-y, less configuration
    10. Write Tests




46:
47:
48:
49: